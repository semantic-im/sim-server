/*
 * Copyright 2010 Softgress - http://www.softgress.com/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sim.server.storage;

import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicLong;

import org.ontoware.rdf2go.RDF2Go;
import org.openrdf.rdf2go.RepositoryModelFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sim.data.Metrics;
import sim.server.CsvDatabase;
import sim.server.Main;
import sim.server.RdfDatabase;
import sim.server.RrdDatabase;
import sim.server.SqlDatabase;

/**
 * Thread safe class used to collect all the events/measurements generated by
 * instrumented code and agent.
 * 
 * @author mcq
 * 
 */
public class StorageWriter {
	private static final Logger logger = LoggerFactory.getLogger(StorageWriter.class);
	private static final ConcurrentLinkedQueue<Metrics> measurements = new ConcurrentLinkedQueue<Metrics>();
	public static final StorageComunicator thread;
	private static final AtomicLong counter = new AtomicLong(0);
	private static final Object lock = new Object();
	private static final int METRICS_BUFFER = 10000;

	static {
		RDF2Go.register(new RepositoryModelFactory());

		thread = new StorageComunicator();
		thread.start();
	}

	public static void addMeasurements(List<Metrics> listOfMeasurements) {
		measurements.addAll(listOfMeasurements);
		flush(counter.addAndGet(listOfMeasurements.size()));
		logger.info("Unprocessed metrics: {}", counter.get());
	}

	private static void flush(long count) {
		if (count >= METRICS_BUFFER) {
			logger.debug(
					"got {} measurements - collector buffer full - signal storage comunicator thread to start processing the metrics from the buffer",
					count);
			synchronized (lock) {
				lock.notify();
			}
		}
	}

	private static class StorageComunicator extends Thread {
		private static final Logger logger = LoggerFactory.getLogger(StorageComunicator.class);
		private static final long COLLECT_INTERVAL = 5000;
		private static final int MAX_METRICS_WRITE = 1000;

		private RdfDatabase rdfWriter = new RdfDatabase();
		private RrdDatabase rrdWriter = new RrdDatabase();
		private SqlDatabase sqlWriter = new SqlDatabase();
		private CsvDatabase csvWriter = new CsvDatabase();

		public StorageComunicator() {
			super("SIM - StorageCommunicator");
			setDaemon(true);
		}

		@Override
		public void run() {
			if (Main.storage_use_sql) {
				sqlWriter.open();
			}
			while (true) {
				try {
					synchronized (lock) {
						lock.wait(COLLECT_INTERVAL);
					}
				} catch (InterruptedException e) {
					break;
				}
				while (!measurements.isEmpty()) {
					try {
						if (Main.storage_use_rdf) {
							rdfWriter.open();
						}
						if (Main.storage_use_csv) {
							csvWriter.open();
						}
						sendMeasurements();
						if (Main.storage_use_rdf) {
							rdfWriter.close();
						}
						if (Main.storage_use_csv) {
							csvWriter.close();
						}
					} catch (Exception e) {
						logger.error("unknown error, ignore to heep thread running", e);
					}
				}
			}
			if (Main.storage_use_sql) {
				sqlWriter.close();
			}
		}

		private void sendMeasurements() {
			logger.info("Start processing metrics from the buffer. Unprocessed metrics: {}", counter.get());
			long count = 0;
			long time = System.currentTimeMillis();
			while (true) {
				Metrics metrics = measurements.poll();
				if (metrics == null)
					break;

				if (Main.storage_use_rdf) {
					metrics.accept(rdfWriter);
				}
				if (Main.storage_use_rrd) {
					metrics.accept(rrdWriter);
				}
				if (Main.storage_use_sql) {
					metrics.accept(sqlWriter);
				}

				if (Main.storage_use_csv) {
					metrics.accept(csvWriter);
				}

				count++;
				if (count >= MAX_METRICS_WRITE)
					break;
			}
			double delta = (double)(System.currentTimeMillis() - time) / 1000.00;
			double speed;
			if (delta > 0)
				speed = count / delta;
			else
				speed = count;
			logger.info("Finished processing {} metrics at {} metrics/second. Unprocessed metrics: {}", new Object[] {count, speed, counter.addAndGet(0 - count)});
		}

	}
}
